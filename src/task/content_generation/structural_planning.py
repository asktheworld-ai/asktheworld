"""
Structural Planning component for AI-driven content generation.

This component takes background research and creates a detailed structural
plan and strategy for content creation, organizing information into a
logical and engaging framework.
"""

import asyncio
from typing import Optional

from pydantic import Field

from src import log
from src.core import DataCore
from src.lib.model.txt.lm_basis import LmBasis
from src.lib.model.txt.lm_gentxt_params import LmGentxtParams
from src.lib.model.txt.lm_gentxt_result import LmGentxtResult

from .background_discovery import BackgroundDiscoveryResult
from .prompts import (
    STRUCTURAL_PLANNING_PROMPT_TEMPLATE,
    STRUCTURAL_PLANNING_SYSTEM_PROMPT,
)


class StructuralPlanningParams(DataCore):
    """Parameters for structural planning."""

    background_research: str = Field(
        description="Comprehensive background research from the discovery phase"
    )

    content_objectives: str = Field(
        default="Create informative and engaging content that educates the target audience",
        description="Specific objectives for the content to be created",
    )

    target_audience: str = Field(
        default="General audience with interest in the topic",
        description="Description of the target audience for the content",
    )

    content_type: str = Field(
        default="Article/Blog Post",
        description="Type of content to be created (e.g., article, blog post, guide, etc.)",
    )

    max_tokens: Optional[int] = Field(
        default=3000, description="Maximum tokens for the LLM response"
    )

    temperature: float = Field(
        default=0.4,
        description="Temperature for LLM generation (balanced for creative structure)",
    )


class StructuralPlanningResult(DataCore):
    """Result from structural planning."""

    background_research: str = Field(
        description="The original background research used"
    )

    content_objectives: str = Field(description="The content objectives specified")

    target_audience: str = Field(description="The target audience specified")

    content_type: str = Field(description="The type of content specified")

    structural_plan: str = Field(
        description="Detailed structural plan and content strategy"
    )

    input_tokens: int = Field(description="Number of input tokens used by the LLM")

    output_tokens: int = Field(
        description="Number of output tokens generated by the LLM"
    )


class StructuralPlanning:
    """
    Structural Planning Component.

    Takes comprehensive background research and transforms it into a well-organized,
    logical content structure and detailed plan for content creation.
    """

    def __init__(self, model: LmBasis, log_name: str = "structural_planning"):
        """
        Initialize the structural planning component.

        Args:
            model: Language model to use for structural planning
            log_name: Name for logging purposes
        """
        self.model = model
        self.logger = log.bind(component=log_name)

    def plan(self, params: StructuralPlanningParams) -> StructuralPlanningResult:
        """
        Create a synchronous structural plan for content.

        Args:
            params: Parameters for structural planning

        Returns:
            StructuralPlanningResult containing detailed content structure
        """
        self.logger.info("Starting structural planning")

        # Prepare the prompt
        prompt = STRUCTURAL_PLANNING_PROMPT_TEMPLATE.format(
            background_research=params.background_research,
            content_objectives=params.content_objectives,
            target_audience=params.target_audience,
            content_type=params.content_type,
        )

        # Create LLM parameters
        llm_params = LmGentxtParams(
            system_prompt=STRUCTURAL_PLANNING_SYSTEM_PROMPT,
            prompt=prompt,
            max_new_tokens=params.max_tokens,
            temperature=params.temperature,
        )

        # Call the LLM
        llm_result: LmGentxtResult = self.model.gentxt(llm_params)

        # Create and return result
        result = StructuralPlanningResult(
            background_research=params.background_research,
            content_objectives=params.content_objectives,
            target_audience=params.target_audience,
            content_type=params.content_type,
            structural_plan=llm_result.output,
            input_tokens=llm_result.input_tokens,
            output_tokens=llm_result.output_tokens,
        )

        self.logger.success("Structural planning completed")
        self.logger.info(
            f"Generated {result.output_tokens} tokens of structural planning"
        )

        return result

    async def aplan(self, params: StructuralPlanningParams) -> StructuralPlanningResult:
        """
        Create an asynchronous structural plan for content.

        Args:
            params: Parameters for structural planning

        Returns:
            StructuralPlanningResult containing detailed content structure
        """
        self.logger.info("Starting async structural planning")

        # Prepare the prompt
        prompt = STRUCTURAL_PLANNING_PROMPT_TEMPLATE.format(
            background_research=params.background_research,
            content_objectives=params.content_objectives,
            target_audience=params.target_audience,
            content_type=params.content_type,
        )

        # Create LLM parameters
        llm_params = LmGentxtParams(
            system_prompt=STRUCTURAL_PLANNING_SYSTEM_PROMPT,
            prompt=prompt,
            max_new_tokens=params.max_tokens,
            temperature=params.temperature,
        )

        # Call the LLM asynchronously
        llm_result: LmGentxtResult = await self.model.agentxt(llm_params)

        # Create and return result
        result = StructuralPlanningResult(
            background_research=params.background_research,
            content_objectives=params.content_objectives,
            target_audience=params.target_audience,
            content_type=params.content_type,
            structural_plan=llm_result.output,
            input_tokens=llm_result.input_tokens,
            output_tokens=llm_result.output_tokens,
        )

        self.logger.success("Async structural planning completed")
        self.logger.info(
            f"Generated {result.output_tokens} tokens of structural planning"
        )

        return result

    def plan_from_discovery(
        self,
        discovery_result: BackgroundDiscoveryResult,
        content_objectives: str = "Create informative and engaging content that educates the target audience",
        target_audience: str = "General audience with interest in the topic",
        content_type: str = "Article/Blog Post",
        max_tokens: Optional[int] = 3000,
        temperature: float = 0.4,
    ) -> StructuralPlanningResult:
        """
        Create a structural plan directly from background discovery results.

        Args:
            discovery_result: Result from background discovery component
            content_objectives: Objectives for the content
            target_audience: Description of target audience
            content_type: Type of content to create
            max_tokens: Maximum tokens for response
            temperature: LLM temperature

        Returns:
            StructuralPlanningResult containing detailed content structure
        """
        params = StructuralPlanningParams(
            background_research=discovery_result.background_research,
            content_objectives=content_objectives,
            target_audience=target_audience,
            content_type=content_type,
            max_tokens=max_tokens,
            temperature=temperature,
        )

        return self.plan(params)

    async def aplan_from_discovery(
        self,
        discovery_result: BackgroundDiscoveryResult,
        content_objectives: str = "Create informative and engaging content that educates the target audience",
        target_audience: str = "General audience with interest in the topic",
        content_type: str = "Article/Blog Post",
        max_tokens: Optional[int] = 3000,
        temperature: float = 0.4,
    ) -> StructuralPlanningResult:
        """
        Create an asynchronous structural plan directly from background discovery results.

        Args:
            discovery_result: Result from background discovery component
            content_objectives: Objectives for the content
            target_audience: Description of target audience
            content_type: Type of content to create
            max_tokens: Maximum tokens for response
            temperature: LLM temperature

        Returns:
            StructuralPlanningResult containing detailed content structure
        """
        params = StructuralPlanningParams(
            background_research=discovery_result.background_research,
            content_objectives=content_objectives,
            target_audience=target_audience,
            content_type=content_type,
            max_tokens=max_tokens,
            temperature=temperature,
        )

        return await self.aplan(params)
